// Hubitat driver for controlling Goldair SleepSmart GCPF315 Fan
// Original Tasmota driver developed by Brett Sheleski
// Ported to Hubitat by dkkohler
// Modified to work with the Goldair SleepSmart GCPF315 Fan by damondins
// Version 1.0.0 - Inital Release


metadata {
	definition(name: "Goldair SleepSmart GCPF315 Fan", namespace: "damondins", author: "damondins") {
		capability "Actuator"
		capability "Refresh"
        capability "Switch"
        capability "FanControl"
        
        command "OscillateOn"
        command "OscillateOff"
   
	}

	preferences {		
		section("Sonoff Host") {
            input(name: "ipAddress", type: "string", title: "IP Address", displayDuringSetup: true, required: true)
			input(name: "port", type: "number", title: "Port", displayDuringSetup: true, required: true, defaultValue: 80)
		}

		section("Authentication") {
			input(name: "username", type: "string", title: "Username", displayDuringSetup: false, required: false)
			input(name: "password", type: "password", title: "Password (sent cleartext)", displayDuringSetup: false, required: false)
		}
	}
}

def parse(String description) {
	def message = parseLanMessage(description)
	def isParsed = false;

	/* parse result from current formats
	def resultJson = {}
	if (message?.json) {
		// current json data format
		resultJson = message.json
        //log.debug resultJson
	}

	// determine fan state
	if ((resultJson?."FanSpeed" in ["1", 1, "1"])) {
		setSwitchState(true)
        setFanState("low")
        setFanSpeedState("33")
        //log.debug "Fanspeed 1"
	}
	else if ((resultJson?."FanSpeed" in ["2", 2, "2"])) {
		setSwitchState(true)
        setFanState("medium")
        setFanSpeedState("66")
        //log.debug "Fanspeed 2"        
	}
	else if ((resultJson?."FanSpeed" in ["3", 3, "3"])) {
		setSwitchState(true)
        setFanState("high")
        setFanSpeedState("99")
        //log.debug "Fanspeed 3"        
	}
	else if ((resultJson?."FanSpeed" in ["0", 0, "0"])) {
		setSwitchState(false)
        setFanState("off")
        setFanSpeedState("0")
        //log.debug "Fanspeed off"        
	}
	else {
		//log.error "Unable to parse Fan state"
	}
    */
}

def setSwitchState(Boolean on) {
	sendEvent(name: "switch", value: on ? "on" : "off")
}

def setOccilateState(Boolean on) {
	sendEvent(name: "occilate", value: on ? "on" : "off")
}

def setFanState(value) {
    sendEvent(name: "speed", value: "$value")
}

def setSpeed(value) {
    
    if (value == "off") {
   		setSwitchState(false)
        sendCommand("Power1", "off")
    }
    else if (value == "on") {
		setSwitchState(true)
        sendCommand("Power1", "on")
    }
    else if (value == "low") {
		setSwitchState(true)
        setFanState("low")
        sendCommand("TuyaSend4", "2,3")
    }
    else if (value == "medium-low" || value == "medium") {
		setSwitchState(true)
        setFanState("medium")
        sendCommand("TuyaSend4", "2,7")
    }
    else if (value == "medium-high" || value == "high") {
		setSwitchState(true)
        setFanState("high")
        sendCommand("TuyaSend4", "2,11")
    }  
}

def on() {
    setSwitchState(true)
    sendCommand("Power1", "on")
    
}

def off() {
    setSwitchState(false)
    sendCommand("Power1", "off")
}

def OscillateOn() {
    setOccilateState(true)
    sendCommand("Power2", "on")
    
}

def OscillateOff() {
    setOccilateState(false)
    sendCommand("Power2", "off")
}


def poll() {
	sendCommand("power2", "refresh")
}

def schedrefresh() {
    refreshrate = "10"
	refreshrateint = Integer.parseInt(refreshrate)
	runIn(refreshrateint, poll)
	//log.debug refreshrateint
}

def refresh() {
	//sendCommand("power2", "refresh")    	
    //schedrefresh()
}

private def sendCommand(String command, payload) {
    //sendCommand(command, payload.toString())
    sendAsynchttpPost(command, payload.toString())
}

private def sendCommand(String command, String payload) {
	//log.debug "sendCommand(${command}:${payload}) to device at $ipAddress:$port"

	if (!ipAddress || !port) {
		log.warn "aborting. ip address or port of device not set"
		return null;
	}
	def hosthex = convertIPtoHex(ipAddress)
	def porthex = convertPortToHex(port)

	def path = "/cm"
	if (payload != null){
		path += "?cmnd=${command}%20${payload}"
	}
	else{
	if (payload == "refresh"){
		path += "?cmnd=${command}"
        //log.debug "Run Refresh"
	}
    }

	if (username){
		path += "&user=${username}"
		if (password){
			path += "&password=${password}"
		}
	}

	def result = new hubitat.device.HubAction(
		method: "GET",
		path: path,
		headers: [
			HOST: "${ipAddress}:${port}"
		]
	)
    //schedrefresh()
	return result
}


def sendAsynchttpPost(String command, String payload) {
    def headers = [:]
    headers.put("Host", "${ipAddress}:${port}")
    headers.put("Content-Type", "application/x-www-form-urlencoded")
    
    if ($password != null)
       headers.put("Authorization", $password)
    
    def uri = "/cm?"
    
    if (!ipAddress || !port) {
		log.warn "aborting. ip address or port of device not set"
		return null;
	}
	def hosthex = convertIPtoHex(ipAddress)
	def porthex = convertPortToHex(port)

   	if (username){
	    path += "&user=${username}"
	    if (password){
		    uri += "user=${username}&password=${password}&"
    	}
    }
    if (payload) {
		uri += "cmnd=${command}%20${payload}"
	}
	else {
		uri += "cmnd=${command}"
	}   
    
    

    def hubAction = null
  try {
    hubAction = new hubitat.device.HubAction(
    method: "POST",
    path: uri,
    headers: headers,
    body: data
  )
  } catch (e) {
      //if ($command != "TuyaSend4") {
          //log.error "Error in postAction(uri, data): $e ('$uri', '$data')"
      //}
  }
  return hubAction     
}

def myCallbackMethod(response, data) {
    if(data["dataitem1"] == "datavalue1")
    	log.debug "data was passed successfully"
    log.debug "status of post call is: ${response.status}"
}

private String convertIPtoHex(ipAddress) { 
	String hex = ipAddress.tokenize( '.' ).collect {  String.format( '%02x', it.toInteger() ) }.join()
	return hex
}

private String convertPortToHex(port) {
	String hexport = port.toString().format('%04x', port.toInteger())
	return hexport
}
